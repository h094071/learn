##分层架构
表现层（presentation）：用户界面，负责视觉和用户互动
业务层（business）：实现业务逻辑
持久层（persistence）：提供数据，SQL 语句就放在这一层
数据库（database） ：保存数据
优点
>结构简单，容易理解和开发
不同技能的程序员可以分工，负责不同的层，天然适合大多数软件公司的组织架构
每一层都可以独立测试，其他层的接口通过模拟解决
缺点
>一旦环境变化，需要代码调整或增加功能时，通常比较麻烦和费时
部署比较麻烦，即使只修改一个小地方，往往需要整个软件重新部署，不容易做持续发布
软件升级时，可能需要整个服务暂停
扩展性差。用户请求大量增加时，必须依次扩展每一层，由于每一层内部是耦合的，扩展会很困难
##事件驱动架构
事件队列（event queue）：接收事件的入口
分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元
事件通道（event channel）：分发器与处理器之间的联系渠道
事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作
优点
>分布式的异步架构，事件处理器之间高度解耦，软件的扩展性好
适用性广，各种类型的项目都可以用
性能较好，因为事件的异步本质，软件不易产生堵塞
事件处理器可以独立地加载和卸载，容易部署
缺点
>涉及异步编程（要考虑远程通信、失去响应等情况），开发相对复杂
难以支持原子性操作，因为事件通过会涉及多个处理器，很难回滚
分布式和异步特性导致这个架构较难测试
##微核架构
优点
>良好的功能延伸性（extensibility），需要什么功能，开发一个插件即可
功能之间是隔离的，插件可以独立的加载和卸载，使得它比较容易部署，
可定制性高，适应不同的开发需要
可以渐进式地开发，逐步增加功能
缺点
>扩展性（scalability）差，内核通常是一个独立单元，不容易做成分布式
开发难度相对较高，因为涉及到插件与内核的通信，以及内部的插件登记机制